classdef (Abstract) IContainerGetter < handle
    methods (Abstract)
        % Determines whether the current container has a registered service
        % with the specified id
        tf = hasDependency(ioc, serviceId);
        
        % Gets the type of a registered service by serviceId
        serviceType = getType(ioc, serviceId);
        
        % Generates an instance of the desired service with all required
        % dependencies.
        % service = get(ioc, serviceId)
        %   Returns the service with all dependencies as determined by the
        %   registered service dependency
        % *** Dynamic Injections ***
        % Dynamic injections set up at creation time.
        % Beware of Dynamic Injections!!!
        % This practice is risky and may result in using the IoC.Container
        % as a service locator in stead of proper dependency injection service
        % An excellent article by Mark Seemann called
        %   Service Locator is an Anti-Pattern
        %   https://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/
        % explains why the Service Locator pattern should be avoided
        %
        % That said, it is sometimes necessary to use the IoC.Container for
        % dynamically generated objects with dynamically generated dependencies
        % I.E in factories, when loading an object graph from a configurable file, etc.
        % Use the get method with specified name-value dependencies:
        % Example:
        % * In dependency name, use the "@" prefix to dynamically set a
        %   name-value ctor injection
        % * In dependency name, use the "&" prefix, or no prefix to declare a 
        %   property injection
        % * In dependency name, use the "#n" pattern, where n is an integer,
        %   i.e "#2", to overwrite the ctor dependency at the specified inedx 
        %   in the parameters list sent to the ctor
        % ** In the dependency value, use no prefix to declare a reference to  
        %    another dependency which will be generated by the IoC.Container at
        %    runtime
        % ** In the dependency value, Use the "$" prefix to declare a by value
        %    string/char injection
        %   set(ioc, "dependent", @Dependent, "someOtherDependency", 1:10, "$A string to be sent to Dependent ctor", "@OptionalParamName", "$Optional param value");
        %   set(ioc, "someOtherDependency", @OtherDependency); 
        %       
        %   % Rewrite the original name-value ctor dependency named
        %   OptionalParamName with this dynamically generated one
        %   obj = get(ioc, "dependent", "@OptionalParamName", "$Rewritten Value");
        %       
        %   % Similarly to using dependent ctor as follows
        %   obj2 = Dependent(OtherDependency(), 1:10,...
        %                    "A string to be sent to Dependent ctor", ...
        %                    "OptionalParamName", "Rewritten Value");
        %   
        %   % Add a name-value ctor dependency that was not declared during
        %   % IoC.Container setup
        %   obj = get(ioc, "dependent", "@AnotherOptionalParameterName", "$Another optional parameter value");
        %   
        %   % this is similar to that:
        %   obj2 = Dependent(OtherDependency(), 1:10,...
        %                    "A string to be sent to Dependent ctor", ...
        %                    "OptionalParamName", "Optional param value", ...
        %                    "AnotherOptionalParameterName", "Another optional parameter value");
        %
        %   % Use dynamic dependencies to change the value injected to the ctor
        %   % at a specific numeric index using the "#" prefix
        %   obj = get(ioc, "dependent", "#2", 1:100);
        %
        %   % this is similar to that:
        %   % notice how the 1:10 injection is changed to 1:100
        %   obj2 = Dependent(OtherDependency(), 1:100,...
        %                    "A string to be sent to Dependent ctor", ...
        %                    "OptionalParamName", "Optional param value");
        %
        %   % Use dynamic dependencies property injection using the "&" prefix
        %   obj = get(ioc, "dependent", "&PropName", "someOtherDependency");
        %   
        %   % this is similar to that:
        %   obj2 = Dependent(OtherDependency(), 1:10,...
        %                    "A string to be sent to Dependent ctor", ...
        %                    "OptionalParamName", "Optional param value");
        %   obj2.PropName = OtherDependency();
        service = get(ioc, serviceId, varargin);
    end
end

